always assertion FindsCycle:
  hasCycle1 = findCycleByKeepingVisitedSet()
  hasCycle2 = tortoiseAndHare()
  return hasCycle == hasCycle1 and hasCycle == hasCycle2

action Init:
  hasCycle = False

  possibleNodes = range(1, 4)

  current = any possibleNodes

  # A dict from node to its successor.
  # Example: {1: 2, 2: 3, 3: None}
  succ = {}

  while True:
    # The current node points to either:
    oneof:
      # None, which means the current pointer is the last one in the list.
      atomic: 
        succ[current] = None 
        break
      # Any other node, including itself.
      atomic:
        next = any possibleNodes
        succ[current] = next
        # If the current node is now pointing to a node that's already in the list,
        # a cycle has been created, we can exit the loop.
        if next in succ:
          hasCycle = True
          break
        succ[next] = None
        current = next

  nodes = succ.keys()
  start = any nodes
  print("succ", succ, "nodes",  nodes, "hasCycle", hasCycle)

atomic func findCycleByKeepingVisitedSet():
  current = start

  visited = set()

  while current != None:
    if current in visited:
      return True
    visited.add(current)
    current = succ.get(current)

  return False

atomic func tortoiseAndHare():
  tortoise = start
  hare = start

  while True:
    # If the slow pointer has not reached the end of the list. Advance it by 1.
    if tortoise != None:
      tortoise = succ.get(tortoise)

    # Advance the fast pointer by 2.
    for _ in range(0, 2):
      if hare != None:
        hare = succ.get(hare)
          
    if tortoise == None and hare == None:
      return False
      
    if tortoise == hare:
      return True

action NoOp:
    pass