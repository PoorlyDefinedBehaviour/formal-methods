NUM_NODES = 3
MAJORITY = NUM_NODES//2+1
DECIDED_VALUE = None

# All non failed nodes eventually decide on the same value.
eventually always assertion Correctness:
  non_failed_nodes = [node for node in nodes if node.state == "running"]

  accepted_value_count = {}

  for node in non_failed_nodes:
    if node.storage.accepted_value != None:
      accepted_value_count[node.storage.accepted_value] = accepted_value_count.get(node.storage.accepted_value, 0) + 1
  
  for value in accepted_value_count.keys():
    if accepted_value_count[value] >= MAJORITY:
      DECIDED_VALUE = value
  if DECIDED_VALUE != None:
    print("DECIDED_VALUE", DECIDED_VALUE)
  return True

role Node:
  action Init:
    self.storage = record(
      proposal_id=0, 
      max_proposal_id=0, 
      accepted_proposal_id=None, 
      accepted_value = None
    )
    self.state = "running"

  atomic action Crash:
    self.state = "crashed"

  atomic fair<strong> action Restart:
    self.state = "running"

  action Prepare:
    if self.state != "running":
      return

    value = "value from node {}".format(self.id)
    proposal_id = None
    atomic:
      n = self.next_proposal_id()
      proposal_id = n

    result = self.broadcast_prepare(proposal_id)

    if result.promise_count < MAJORITY:  
      return 
    
    if result.accepted_proposal:
      # print("action Prepare: result.accepted_proposal", result.accepted_proposal)
      value = result.accepted_proposal["accepted_value"]

    self.broadcast_propose(proposal_id, value)

  func next_proposal_id():
    self.storage.proposal_id += 1    
    return self.storage.proposal_id

  func broadcast_prepare(proposal_id):
    promise_count = 0
    accepted_proposal = None

    for node in nodes:
      response = node.on_prepare(proposal_id)
      if not response:
        continue

      promise_count += 1
      # print("broadcast_prepare: accpted_value", response["accepted_value"])
      if response["accepted_value"] and (not accepted_proposal or accepted_proposal["accepted_proposal_id"] < response["accepted_proposal_id"]):
        # print("found accepted proposal", "node", node.id, response)
        accepted_proposal = response

    return record(promise_count=promise_count, accepted_proposal=accepted_proposal)

  func broadcast_propose(proposal_id, value):
    for node in nodes:
      node.on_propose(proposal_id, value)

  atomic func on_prepare(proposal_id):
    if self.state != "running":
      return None

    if proposal_id <= self.storage.max_proposal_id:
      return None

    self.storage.max_proposal_id = proposal_id
    
    return {
      "proposal_id": self.storage.max_proposal_id, 
      "accepted_proposal_id": self.storage.accepted_proposal_id,
      "accepted_value": self.storage.accepted_value,
     }

  atomic func on_propose(proposal_id, value):
    if self.state != "running":
      return None

    if proposal_id != self.storage.max_proposal_id:
      return None

    self.storage.accepted_proposal_id = proposal_id
    self.storage.accepted_value = value

    # print("ACCEPTED", "NODE", self.id, "ID", self.storage.accepted_proposal_id, "V", self.storage.accepted_value)

    return {
      "proposal_id": self.storage.max_proposal_id, 
      "accepted_proposal_id": self.storage.accepted_proposal_id,
      "accepted_value": self.storage.accepted_value,
  }

action Init:
  nodes = []
  for i in range(1, NUM_NODES+1):
    nodes.append(Node(id=i))

action NoOp:
  pass